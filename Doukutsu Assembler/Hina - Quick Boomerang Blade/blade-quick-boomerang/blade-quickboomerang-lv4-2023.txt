offset 004075E0

#define
//lv4 means it replaces the blade slash projectile
//damage is strange, it's numImpacts/(2^6) for some reason (i made the original code a few years ago)
//there is a part in the code underneath that you can comment out to have the bullets do set damage! (Blade Slash damage in BL)

speed=8 ;how fast the tiny blades rotate around the main bullet
orbitsize=4 ;multiplies the distance from the blade by 2^(orbitsize)
childAmount=3 ;+1, how many small blades there are, keep this equal to the value in lv3 blade
mdist=16 ;how many frames the small blades should last, used as a secondary despawn method

bullY=[494868] ;ram addresses for the bullet location, used by the small blades
bullX=[49486c]

timeF=esi
frametimer=[edi+24]
timer=[edi+30]
level=[ebp+c]

bullet.collision=[edi]
bullet.shotID=[edi+4]
bullet.inuse=[edi+C]
bullet.x=[edi+10]
bullet.y=[edi+14]
bullet.movex=[edi+18]
bullet.movey=[edi+1C]
bullet.wassetup=[edi+28]
bullet.frametimer=[edi+30]
bullet.framenum=[edi+34]
bullet.direction=[edi+38]
bullet.displayl=[edi+3C]
bullet.displayu=[edi+40]
bullet.displayr=[edi+44]
bullet.displayd=[edi+48]
bullet.distance=[edi+4C]
bullet.maxdistance=[edi+54]
bullet.damage=[edi+58]
bullet.numImpacts=[edi+5C]
setpointer=mov edi,[ebp+8]
#enddefine

enter 0,0

setpointer

//comment out these three lines below to use bullet damage from booster's lab!!!
mov eax,bullet.numImpacts
shr eax,6
mov bullet.damage,eax

inc bullet.distance
mov eax,bullet.distance
cmp eax,mdist
jg :die

push 9
call 403c40 ;count bullets by family
add esp,4
test eax,eax
jg :working ;disappears when no blades exist on screen
:die
mov bullet.inuse,0
push 0
push 3
push bullet.y
push bullet.x
call 40ac90
add esp,10
jmp :end

:working
cmp bullet.wassetup,0
jnz :wasset
mov bullet.wassetup,1

mov eax,100
xor edx,edx
mov ecx,childAmount
inc ecx
div ecx ;divide by childAmount+1 to get proper timer fragments
;eax now contains the base timer value
mov edx,bullet.direction ;how many times to multiply the base by
imul eax,edx
mov timer,eax

mov eax,bullet.direction
xor edx,edx
mov ecx,4
div ecx
mov bullet.direction,edx

:wasset
add timer,speed

mov dl,byte timer
push edx
call 4258b0
add esp,4
;setpointer
shl eax,orbitsize
add eax,bullX
mov bullet.x,eax
mov dl,byte timer
push edx
call 4258c0
add esp,4
;setpointer
shl eax,orbitsize
add eax,bullY
mov bullet.y,eax

:yvelok
mov eax,bullet.movex
add bullet.x,eax
mov eax,bullet.movey
add bullet.y,eax

:render
inc frametimer
cmp frametimer,1
jle :nochange
mov frametimer,0
inc bullet.framenum
:nochange
cmp bullet.framenum,3
jle :nochange_either
mov bullet.framenum,0
:nochange_either

mov eax,30
mov bullet.displayu,eax
add eax,10
mov bullet.displayD,eax

mov eax,bullet.framenum
mov edx,10
imul eax,edx
test bullet.direction,1
je :l
:r
add eax,40
:l
mov bullet.displayl,eax
add eax,10
mov bullet.displayr,eax

:end
leave
retn