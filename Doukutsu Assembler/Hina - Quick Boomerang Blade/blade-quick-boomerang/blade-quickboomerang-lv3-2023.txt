offset 00407110

#define
amt=300 ;how fast the bullet moves INITIALLY in the direction perpendicular to the main direction
step=90 ;how much the perpendicular velocity changes every frame
limit=300 ;at what perpendicular velocity the bullet turns around (probably should be the same as amt?)
limit2=180 ;at what perpendicular velocity the bullet disappears when returning (should be half of the value above)
speed=1200 ;how fast the bullet is in the main direction
childAmount=3 ;+1, how many small blades are spawned

bullY=[494868] ;ram addresses for the bullet location, used by the small blades
bullX=[49486c]

level=[ebp+c] ;bullet level
var=[edi+8] ;bullet flags
frametimer=[edi+30]
flyback=[edi+20]
frameN=[edi+24]

bullet.collision=[edi]
bullet.shotID=[edi+4]
bullet.inuse=[edi+C]
bullet.x=[edi+10]
bullet.y=[edi+14]
bullet.movex=[edi+18]
bullet.movey=[edi+1C]
bullet.wassetup=[edi+28]
bullet.frametimer=[edi+30]
bullet.framenum=[edi+34]
bullet.direction=[edi+38]
bullet.displayl=[edi+3C]
bullet.displayu=[edi+40]
bullet.displayr=[edi+44]
bullet.displayd=[edi+48]
bullet.distance=[edi+4C]
bullet.maxdistance=[edi+54]
bullet.damage=[edi+58]
bullet.numImpacts=[edi+5C]
setpointer=mov edi,[ebp+8]
#enddefine

enter 0,0
setpointer

inc bullet.distance
mov eax,bullet.distance
cmp eax,bullet.maxdistance
jle :working
mov bullet.inuse,0
push 0
push 3
push bullet.y
push bullet.x
call 40ac90
add esp,10
jmp :end

:working
cmp bullet.distance,3
jne :sjump
mov eax,var
and eax,fffffffb
mov var,eax
:sjump
mov eax,bullet.distance
cdq
mov ecx,4
idiv ecx
cmp edx,1
jne :nosound
push 1
push 6a
call 420640
add esp,8
:nosound
;setpointer
cmp bullet.wassetup,0
jne :movement
;wasn't
mov bullet.wassetup,1

;spawn children
xor esi,esi
:childLoop
cmp esi,childAmount
jg :exitLoop
push esi
push bullet.Y
push bullet.X
push 17
call 403f80
add esp,10
inc esi
jmp :childloop
:exitLoop

mov edx,bullet.direction
mov frameN,edx
cmp edx,3
ja :endjump1
jmp [edx*4+:StateTable]
:Left
mov bullet.movex,-speed
mov bullet.movey,-amt
jmp :endjump1
:Up
mov bullet.movey,-speed
mov bullet.movex,-amt
jmp :endjump1
:Right
mov bullet.movex,speed
mov bullet.movey,-amt
jmp :endjump1
:Down
mov bullet.movey,speed
mov bullet.movex,-amt
:endjump1

mov flyback,1
jmp :Render

:movement
cmp flyback,1
jne :f0

;f1
mov eax,bullet.direction
and eax,1
jnz :updown1
;leftright1
add bullet.movey,step
cmp bullet.movey,limit
jle :noope
mov flyback,0
mov eax,bullet.movex
neg eax
mov bullet.movex,eax
mov bullet.movey,amt
jmp :nopej
:updown1
add bullet.movex,step
cmp bullet.movex,limit
jle :noope
mov flyback,0
mov eax,bullet.movey
neg eax
mov bullet.movey,eax
mov bullet.movex,amt
:nopej
cmp bullet.direction,2
jge :dec
;inc
add bullet.direction,2
jmp :noope
:dec
sub bullet.direction,2
:noope
jmp :nope

:f0
mov eax,bullet.direction
and eax,1
jnz :updown2
;leftright2
sub bullet.movey,step
cmp bullet.movey,-limit2
jge :nopej2
mov bullet.inuse,0
jmp :nopej2
:updown2
sub bullet.movex,step
cmp bullet.movex,-limit2
jge :nopej2
mov bullet.inuse,0

:nopej2
:nope
mov eax,bullet.movex
add bullet.x,eax
mov eax,bullet.movey
add bullet.y,eax

:Render
;blinking, looks bad with high bullet speeds
/*
inc frametimer
cmp frametimer,1
jg :blink
jmp :normalRend
:blink
xor eax,eax
mov frametimer,eax
mov bullet.displayL,eax
mov bullet.displayU,eax
mov bullet.displayR,eax
mov bullet.displayD,eax
jmp :end
*/

:normalRend
mov edx,bullet.direction
cmp edx,3
ja :end
jmp [edx*4+:RendTable]

:Firstrow
mov eax,110
jmp :cRend
:Secrow
mov eax,128
:cRend
mov bullet.displayL,eax
add eax,18
mov bullet.displayR,eax

mov edx,bullet.direction
cmp edx,3
ja :end
jmp [edx*4+:RendTable2]
:leftR
xor eax,eax
jmp :cRend2
:updownR
mov eax,30
jmp :cRend2
:rightR
mov eax,18

:cRend2
mov bullet.displayU,eax
add eax,18
mov bullet.displayD,eax


/*
mov eax,30
cmp bullet.direction,0
je :l
:r
add eax,18
:l
mov bullet.displayu,eax
add eax,18
mov bullet.displayD,eax

mov eax,bullet.framenum
mov edx,18
imul eax,edx
add eax,a0
mov bullet.displayl,eax
add eax,18
mov bullet.displayr,eax
*/

:end

mov eax,bullet.X
mov bullX,eax
mov eax,bullet.Y
mov bullY,eax

leave
retn

:StateTable
print :left
print :up
print :right
print :down
:RendTable
print :Firstrow
print :Firstrow
print :Firstrow
print :Secrow
:RendTable2
print :leftR
print :updownR
print :rightR
print :updownR
 /*
:RamOffsetX
data 00000000
:RamOffsetY
data 00000000
*/